Identifier:include
Separator:<
Identifier:stdio
Separator:.
Identifier:h
Separator:>
Identifier:include
Separator:<
Identifier:stdlib
Separator:.
Identifier:h
Separator:>
Keyword:int
Identifier:array
Separator:(
Keyword:int
Identifier:n
Separator:)
Separator:{
Keyword:int
Identifier:i
Separator:,
Identifier:j
Separator:,
Identifier:no
Separator:,
Identifier:num
Separator:,
Identifier:max
Separator:;
Keyword:int
Operator:*
Identifier:mtrx
Separator:;
Keyword:if
Separator:(
Identifier:n
Integer :2
Operator:==
Integer :0
Separator:)
Separator:{
Identifier:n
Operator:=
Identifier:n
Operator:+
Integer :1
Separator:;
Separator:}
Identifier:max
Operator:=
Identifier:n
Operator:*
Identifier:n
Separator:;
Identifier:mtrx
Operator:=
Separator:(
Keyword:int
Operator:*
Separator:)
Identifier:malloc
Separator:(
Identifier:max
Operator:+
Identifier:max
Separator:)
Separator:;
Identifier:mtrx
Separator:[
Identifier:n
Operator:/
Integer :2
Separator:]
Operator:=
Integer :1
Separator:;
Identifier:i
Operator:=
Integer :0
Separator:;
Identifier:j
Operator:=
Identifier:n
Operator:/
Integer :2
Separator:;
Identifier:for
Separator:(
Identifier:num
Operator:=
Integer :2
Separator:;
Identifier:num
Separator:<
Operator:=
Identifier:max
Separator:;
Identifier:num
Operator:++
Separator:)
Separator:{
Identifier:i
Operator:=
Identifier:i
Operator:-
Integer :1
Separator:;
Identifier:j
Operator:=
Identifier:j
Operator:+
Integer :1
Separator:;
Keyword:if
Separator:(
Separator:(
Identifier:num
Operator:-
Integer :1
Separator:)
Identifier:n
Operator:==
Integer :0
Separator:)
Separator:{
Identifier:i
Operator:=
Identifier:i
Operator:+
Integer :2
Separator:;
Identifier:j
Operator:=
Identifier:j
Operator:-
Integer :1
Separator:;
Separator:}
Keyword:if
Separator:(
Identifier:i
Separator:<
Integer :0
Separator:)
Separator:{
Identifier:i
Operator:=
Identifier:n
Operator:-
Integer :1
Separator:;
Separator:}
Keyword:if
Separator:(
Identifier:j
Separator:>
Identifier:n
Operator:-
Integer :1
Separator:)
Separator:{
Identifier:j
Operator:=
Integer :0
Separator:;
Separator:}
Identifier:no
Operator:=
Identifier:i
Operator:*
Identifier:n
Operator:+
Identifier:j
Separator:;
Identifier:mtrx
Separator:[
Identifier:no
Separator:]
Operator:=
Identifier:num
Separator:;
Separator:}
Identifier:printf
Separator:(
Separator:"
Identifier:The
Identifier:rubik
Identifier:is
Separator::
Separator:"
Separator:,
Identifier:n
Separator:)
Separator:;
Identifier:no
Operator:=
Integer :0
Separator:;
Identifier:for
Separator:(
Identifier:i
Operator:=
Integer :0
Separator:;
Identifier:i
Separator:<
Identifier:n
Separator:;
Identifier:i
Operator:++
Separator:)
Separator:{
Identifier:printf
Separator:(
Separator:"
Separator:\
Identifier:n
Separator:"
Separator:)
Separator:;
Identifier:for
Separator:(
Identifier:j
Operator:=
Integer :0
Separator:;
Identifier:j
Separator:<
Identifier:n
Separator:;
Identifier:j
Operator:++
Separator:)
Separator:{
Identifier:printf
Separator:(
Separator:"
Integer :3
Identifier:d
Separator:"
Separator:,
Identifier:mtrx
Separator:[
Identifier:no
Separator:]
Separator:)
Separator:;
Identifier:no
Operator:++
Separator:;
Separator:}
Separator:}
Identifier:printf
Separator:(
Separator:"
Separator:\
Identifier:n
Separator:"
Separator:)
Separator:;
Identifier:free
Separator:(
Identifier:mtrx
Separator:)
Separator:;
Keyword:return
Integer :0
Separator:;
Separator:}
Keyword:int
Identifier:main
Separator:(
Separator:)
Separator:{
Keyword:int
Identifier:n
Separator:;
Identifier:printf
Separator:(
Separator:"
Identifier:Input
Identifier:the
Identifier:n
Separator::
Separator:\
Identifier:n
Separator:"
Separator:)
Separator:;
Identifier:scanf
Separator:(
Separator:"
Identifier:d
Separator:"
Separator:,
Operator:&
Identifier:n
Separator:)
Separator:;
Identifier:array
Separator:(
Identifier:n
Separator:)
Separator:;
Keyword:return
Integer :0
Separator:;
Separator:}
